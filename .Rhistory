View(result)
View(result1)
View(result2)
View(result3)
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL")
result2 <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL")
result2 <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
hg19
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")  # Get columns
dbGetQuery(hg19, "select count(*) from affyU133Plus2")  # Get rows
affyData <- dbReadTable(hg19, "affyU133Plus2")
View(affyData)
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL")
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL/")
result2 <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL/")
ucscDb <- dbConnect(MySQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL/DATA/")
result2 <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
ucscDb <- dbConnect(SQL(),user="ASUS",host="C:/Program Files/Microsoft SQL Server/MSSQL13.MSSQLSERVER/MSSQL/DATA/")
library(swirl)
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
skip()
skip()
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
rug(hidh)
skip()
hight
high
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm,col = "green")
abline
abline(v=12,lwd=2)
abline(v=median(ppm),col = "magental, lwd=4)
)
abline(ppm, v=median(ppm),col = "magental, lwd=4)
skip()
skip()
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col = "wheat",main = "Number of Counties in Each Region")
boxplot(data = pollution,col = "red")
skip()
par(mfrow=c(2,1),mar=c(4,4,2,1))
skip()
east
head(east)
skip()
skip()
skip()
abline(12, lwd = 2)
skip()
skip()
skip()
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
skip()
skip()
skip()
library(datasets)
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
ppm <- pollution$pm25
ppm
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
high <- pollution>15
head(pollution)
high <- subset(pollution,pm25>10)
high
low <- subset(pollution,pm25<5)
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm,col = "green")
swirl()
swirl()
?Devices
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
dev.cur()
skip()
skip()
skip()
skip()
setwd("D:/Кости/Coursera/Coursera Data Science/4. Exploratory Data Analysis/W1/7. Course Project 1/1/")
setwd("D:/Кости/Coursera/Coursera Data Science/4. Exploratory Data Analysis/W1/7. Course Project 1/1")
mydata<-read.csv("household_power_consumption.txt",stringsAsFactors=FALSE,sep=";")
View(mydata)
good<-as.Date(mydata$Date,"%d/%m/%Y") %in% c(as.Date("01/02/2007","%d/%m/%Y"),as.Date("02/02/2007","%d/%m/%Y"))
mydata1<-mydata[good,]
View(mydata1)
mydata[,1]
hist(as.numeric(mydata1$Global_active_power),breaks=6,col="red",main="Global Active Power", xlab="Global Active Power(kilowatts")
mydata[1,]
mydata[2,]
mydata[1,]
mydata[1,1]
mydata[,1]
mydata[5,]
mydata[good,]
as.Date("01/02/2007","%d/%m/%Y"
)
?%in%
good
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="i", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="b", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="")
,axes=FALSE
plot(as.numeric(mydata1$Global_active_power),main="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(0,2,4,6))
box(lty = 1, col = 'black')
plot(1:nrow(mydata1),as.numeric(mydata1$Sub_metering_1),main="", ylab="Energy sub metering",xlab="",type="l",col="black",axes=FALSE)
par(new=T)
plot(as.numeric(mydata1$Sub_metering_2),col="red",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
par(new=T)
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2, at = c(0,10,20,30),labels = c("0","10","20","30"))
legend("topright",legend=c("sub-metering1","sub-metering2","sub-metering3"),col=c("black","red","blue"),lty=c(1,1,1),lwd=2)
box(lty = 1, col = 'black')
par(new=F)
par(mfrow=c(2,2))
plot(as.numeric(mydata1$Global_active_power),main ="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(0,2,4,6))
box(lty = 1, col = 'black')
plot(as.numeric(mydata1$Voltage),main="voltage",type="l", ylab="voltage",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(234,238,240,242),labels=c("234","238","240","242"))
box(lty = 1, col = 'black')
plot(1:nrow(mydata1),as.numeric(mydata1$Sub_metering_1),main="Energy metering", ylab="Energy sub metering",xlab="",type="l",col="black",axes=FALSE)
par(new=T)
plot(as.numeric(mydata1$Sub_metering_2),col="red",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
par(new=T)
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2, at = c(0,10,20,30),labels = c("0","10","20","30"))
legend("topright",legend=c("sub-metering1","sub-metering2","sub-metering3"),col=c("black","red","blue"),lty=c(1,1,1),lwd=2)
box(lty = 1, col = 'black')
par(new=F)
plot(as.numeric(mydata1$Global_reactive_power),main ="Global Reactive Power",type="l", ylab="",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(0.1,0.2,0.3,0.4),c("0.1","0.2","0.3","0.4"))
box(lty = 1, col = 'black')
?par(new=T)
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2, at = c(0,10,20,30),labels = c("0","10","20","30"))
legend("topright",legend=c("sub-metering1","sub-metering2","sub-metering3"),col=c("black","red","blue"),lty=c(1,1,1),lwd=2)
box(lty = 1, col = 'black')
par(new=F)
plot(as.numeric(mydata1$Global_reactive_power),main ="Global Reactive Power",type="l", ylab="",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(0.1,0.2,0.3,0.4),c("0.1","0.2","0.3","0.4"))
box(lty = 1, col = 'black')
plot(1:nrow(mydata1),as.numeric(mydata1$Sub_metering_1),main="Energy metering", ylab="Energy sub metering",xlab="",type="l",col="black",axes=FALSE)
par(new=T)
plot(as.numeric(mydata1$Sub_metering_2),col="red",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
par(new=T)
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
par(new=F)
par(mfrow=c(2,2))
plot(as.numeric(mydata1$Global_active_power),main ="Global Active Power",type="l", ylab="Global Active Power(kilowatts)",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(0,2,4,6))
box(lty = 1, col = 'black')
plot(as.numeric(mydata1$Voltage),main="voltage",type="l", ylab="voltage",xlab="",axes=FALSE)
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2,at=c(234,238,240,242),labels=c("234","238","240","242"))
box(lty = 1, col = 'black')
plot(1:nrow(mydata1),as.numeric(mydata1$Sub_metering_1),main="Energy metering", ylab="Energy sub metering",xlab="",type="l",col="black",axes=FALSE)
plot(as.numeric(mydata1$Sub_metering_2),col="red",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
plot(as.numeric(mydata1$Sub_metering_2),col="red",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
par(new=T)
plot(as.numeric(mydata1$Sub_metering_3),col="blue",type="l",axes=FALSE,ylim=c(0,40),xlab="",ylab="")
axis(1, at = c(0,1500,2900),labels = c("Thu","Fri","Sat"))
axis(2, at = c(0,10,20,30),labels = c("0","10","20","30"))
legend("topright",legend=c("sub-metering1","sub-metering2","sub-metering3"),col=c("black","red","blue"),lty=c(1,1,1),lwd=2)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
print(p)  ## Plot appears
xyplot(Ozone ~ Wind, data = airquality)  ## Auto-printing
set.seed(10)
x <- rnorm(100)
x <- rnorm(100)
x
set.seed(10)
x <- rnorm(100)
x
f <- rep(0:1, each = 50)
f
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
f
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(ggplot2)
head(maacs)
str(mpg)
qplot(displ, hwy, data = mpg)
str(maacs)
library(datasets)
str(maacs)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50,2] <- 100  ## Outlier!
testdat
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g + geom_line()
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
readRDS("https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/PlottingLattice/maacs_env.rds")
readRDS(https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/PlottingLattice/maacs_env.rds)
?readRDS()
data2 <- "https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/PlottingLattice/maacs_env.rds"
?readRDS(data2)
readRDS(data2)
readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
read.RDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
read_rds("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
str(maacs)
head(maacs)
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
str(maacs)
summary(maacs)
str(maacs)
head(maacs)
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs.Rda")
read_file("D:/Кости/R/Git_R/Test_K2/data/maacs.Rda")
View(maacs)
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
load(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
data("D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
data(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
read.ftable(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
read.ftable(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
read.table(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
load(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs <- load(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs
maacs <- load(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
str(maacs)
maacs <- load(file = "D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
maacs <- load("D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs <- load("D:/Кости/R/Git_R/Test_K2/data/maacs2.Rda")
maacs <- load("D:/Кости/R/Git_R/Test_K2/data/maacs.Rda")
maacs2 <- load("D:/Кости/R/Git_R/Test_K2/data/maacs.Rda")
maacs2
maacs <- readRDS("D:/Кости/R/Git_R/Test_K2/data/maacs_env.rds")
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
g <- ggplot(maacs, aes(logpm25, NocturnalSympt))
g
seq(0, 1, length = 4)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind|data = airquality)
xyplot(Ozone~Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality, col="red,pch = 8, main = "Big Apple Data"
skip()
skip()
skip()
xyplot(Ozone~Wind,data=airquality)
p <- xyplot(Ozone~Wind,data=airquality)
p
p
names(p)
mynames[myfull]
p[["formula"]]
skip()
table()
table(f)
xyplot(y~x|f,layout = c(2,1))
v1
skip()
myedit("plot1.R")
skip()
myedit("plot2.R")
source(pathtofile("plot1.R"),local=TRUE)
source(pathtofile("plot2.R"),local=TRUE)
skip()
table(diamonds)
skip()
skip()
myedit
skip()
pathtofile("myLabels.R")
pathtofile("myLabels.R",local = TRUE)
skip()
skip()
skip()
colors(10)
sample(colors(),10)
skip()
pal(0)
pal(1)
pal(seq(0,1,len=6))
colorRamp(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
skip()
p2(2)
p2(10)
p1(20)
showMe
skip()
showMe(p2(20))
showMe(p2(2))
p1
?rgb
skip()
p3
p3(5)
skip()
skip()
skip()
showMe (cols)
skip()
pal(20)
showMe(pal(20))
skip()
skip(0)
skip()
skip()
qplot(displ,hwy,data = cars)
skip()
skip()
skip()
skiop()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
brk
counts
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
summary(g)
skip()
skip()
cutpoints
skip()
skip()
skip()
skip()
skip()
skip()
1
aes(group=...)
0
swirl()
load("data/samsungData.rda")
getwd()
setwd("D:/Кости/R/Git_R/Test_K2/")
setwd("D:/Кости/R/Git_R/Test_K2")
load("data/samsungData.rda")
names(samsungData)[1:12]
View(samsungData)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
diamonds$car2
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
stageVariable("diamonds$car2",diamonds$car2)
library(ggplot2)
stageVariable("diamonds$car2",diamonds$car2)
library(ggplot2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
table(samsungData$activity)
table(samsungData$activity)
View(samsungData)
names(samsungData)[1:12]
str(samsungData)
summary(samsungData)
table(samsungData$activity)
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
View(sub1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
source("myplclust.R")
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
source("myplclust.R")
myplclust
distanceMatrix <- dist(sub1[, 1:3])
distanceMatrix
hclustering <- hclust(distanceMatrix)
